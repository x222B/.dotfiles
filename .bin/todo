#!/usr/bin/lua
--TODO: refactor everything
--TODO: ansi colors, urgent!
--TODO: default to list()
--TODO: 'unknown command'
--TODO: gist lua ansi escape codes
--TODO: if already done, reset
--TODO: sort()

do
   -- declare local variables
   --// exportstring( string )
   --// returns a "Lua" portable version of the string
   local function exportstring( s )
      return string.format("%q", s)
   end

   --// The Save Function
   function table.save(  tbl,filename )
      local charS,charE = "   ","\n"
      local file,err = io.open( filename, "wb" )
      if err then return err end

      -- initiate variables for save procedure
      local tables,lookup = { tbl },{ [tbl] = 1 }
      file:write( "return {"..charE )

      for idx,t in ipairs( tables ) do
         file:write( "-- Table: {"..idx.."}"..charE )
         file:write( "{"..charE )
         local thandled = {}

         for i,v in ipairs( t ) do
            thandled[i] = true
            local stype = type( v )
            -- only handle value
            if stype == "table" then
               if not lookup[v] then
                  table.insert( tables, v )
                  lookup[v] = #tables
               end
               file:write( charS.."{"..lookup[v].."},"..charE )
            elseif stype == "string" then
               file:write(  charS..exportstring( v )..","..charE )
            elseif stype == "number" then
               file:write(  charS..tostring( v )..","..charE )
            end
         end

         for i,v in pairs( t ) do
            -- escape handled values
            if (not thandled[i]) then

               local str = ""
               local stype = type( i )
               -- handle index
               if stype == "table" then
                  if not lookup[i] then
                     table.insert( tables,i )
                     lookup[i] = #tables
                  end
                  str = charS.."[{"..lookup[i].."}]="
               elseif stype == "string" then
                  str = charS.."["..exportstring( i ).."]="
               elseif stype == "number" then
                  str = charS.."["..tostring( i ).."]="
               end

               if str ~= "" then
                  stype = type( v )
                  -- handle value
                  if stype == "table" then
                     if not lookup[v] then
                        table.insert( tables,v )
                        lookup[v] = #tables
                     end
                     file:write( str.."{"..lookup[v].."},"..charE )
                  elseif stype == "string" then
                     file:write( str..exportstring( v )..","..charE )
                  elseif stype == "number" then
                     file:write( str..tostring( v )..","..charE )
                  end
               end
            end
         end
         file:write( "},"..charE )
      end
      file:write( "}" )
      file:close()
   end

   --// The Load Function
   function table.load( sfile )
      local ftables,err = loadfile( sfile )
      if err then return _,err end
      local tables = ftables()
      for idx = 1,#tables do
         local tolinki = {}
         for i,v in pairs( tables[idx] ) do
            if type( v ) == "table" then
               tables[idx][i] = tables[v[1]]
            end
            if type( i ) == "table" and tables[i[1]] then
               table.insert( tolinki,{ i,tables[i[1]] } )
            end
         end
         -- link indices
         for _,v in ipairs( tolinki ) do
            tables[idx][v[2]],tables[idx][v[1]] =  tables[idx][v[1]],nil
         end
      end
      return tables[1]
   end
-- close do
end

function Main()

    local home = os.getenv ( "HOME" )
    local todo = table.load( home .. "/.local/todo_tbl.lua" )
    if todo == nil then todo = {} end

    function saveTable()
        assert( table.save( todo, home .. "/.local/todo_tbl.lua" ) == nil )
    end

    function add(param)
        for i=2,#arg do
            local newItem = { value = arg[i] }
            table.insert(todo,newItem)
        end
        saveTable()
    end

    function list()
        local ansiReset = string.char(27) .. '[0m'
        local ansiStrike = string.char(27) .. '[9m'
        local ansiRed = string.char(27) .. '[31m'

        for i=1, #todo do
            if todo[i].state == 'done' then
                print(i .. ' ' .. ansiStrike .. todo[i].value .. ansiReset)
            elseif todo[i].state == 'urgent' then
                print(i .. ' ' .. ansiRed .. todo[i].value .. ansiReset)
            else
                print(i .. ' ' .. todo[i].value)
            end
        end
    end

    --TODO: todo rm 3 2 / maybe reverse for?
    function rm()
        for i=2,#arg do
            table.remove(todo,arg[i]-(i-2))
        end
        saveTable()
    end

    function done()
        for i=2,#arg do
            index = tonumber(arg[i])
            if todo[index].state == 'done' then
                todo[index].state = nil
            else
                todo[index].state = 'done'
            end
        end
        saveTable()
    end

    function urgent()
        for i=2,#arg do
            index = tonumber(arg[i])
            if todo[index].state == 'urgent' then
                todo[index].state = nil
            else
                todo[index].state = 'urgent'
            end
        end
        saveTable()
    end

    function clean()
        for i=#todo,1,-1 do
                if todo[i].state == 'done' then
                    table.remove(todo,i)
                end
        end
        saveTable()
    end

    function reset()
        os.remove(home .. "/.local/todo_tbl.lua")
    end

    if arg[1] == 'add' then
        add()
    elseif arg[1] == 'rm' then
        rm()
    elseif arg[1] == 'list' then
        list()
    elseif arg[1] == 'done' then
        done()
    elseif arg[1] == 'clean' then
        clean()
    elseif arg[1] == 'reset' then
        reset()
    elseif arg[1] == 'urgent' then
        urgent()
    end

end

Main()
